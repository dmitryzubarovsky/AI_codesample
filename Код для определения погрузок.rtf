{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Oblique;\f4\froman\fcharset0 Times-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green51\blue179;\red0\green98\blue122;\red63\green145\blue1;
\red148\green85\blue141;\red8\green8\blue8;\red102\green0\blue153;\red6\green125\blue23;\red140\green140\blue140;
\red0\green0\blue128;\red128\green128\blue128;\red14\green74\blue142;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c20000\c70196;\csgenericrgb\c0\c38431\c47843;\csgenericrgb\c24706\c56863\c392;
\csgenericrgb\c58039\c33333\c55294;\csgenericrgb\c3137\c3137\c3137;\csgenericrgb\c40000\c0\c60000;\csgenericrgb\c2353\c49020\c9020;\csgenericrgb\c54902\c54902\c54902;
\csgenericrgb\c0\c0\c50196;\csgenericrgb\c50196\c50196\c50196;\csgenericrgb\c5490\c29020\c55686;\cssrgb\c0\c0\c0;}
{\info
{\author Danila}
{\*\company SPecialiST RePack}}\paperw11900\paperh16840\margl1701\margr850\margb1134\margt1134\vieww12200\viewh16560\viewkind1\viewscale128
\deftab708
\pard\pardeftab708\ri-6\sl259\slmult1\sa160\partightenfactor0

\f0\fs24 \cf0 \uc0\u1051 \u1080 \u1089 \u1090 \u1080 \u1085 \u1075 
\f1  1 \'96 
\f0 \uc0\u1055 \u1088 \u1086 \u1094 \u1077 \u1089 \u1089 
\f1  
\f0 \uc0\u1086 \u1073 \u1085 \u1072 \u1088 \u1091 \u1078 \u1077 \u1085 \u1080 \u1103 
\f1 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab708\ri-6\partightenfactor0

\f2\fs20 \cf2 def \cf3 run\cf4 (\cf5 self\cf4 ) \cf6 -> \cf2 None\cf6 :\uc0\u8232     \cf5 self\cf6 .__init\cf4 ()\uc0\u8232     \cf5 self\cf6 ._health_checker.beat\cf4 (\uc0\u8232         \cf7 type\cf6 =HealthDataType.DATA,\uc0\u8232         \cf7 data\cf6 =\cf8 'START'\uc0\u8232     \cf4 )\uc0\u8232     \cf2 try\cf6 :
\f3\i \cf9 \uc0\u8232         
\f2\i0 \cf2 while \cf5 self\cf6 ._continue_work\cf4 ()\cf6 :\uc0\u8232             \cf2 if \cf5 self\cf6 .__image_queue.empty\cf4 ()\cf6 :\uc0\u8232                 time.sleep\cf4 (\cf5 self\cf6 .__sleep_time_attempting_get_task\cf4 )\uc0\u8232                 \cf2 continue
\f3\i \cf9 \uc0\u8232 \u8232             
\f2\i0 \cf0 cap_image\cf6 : \cf0 CapturedImage \cf6 = \cf5 self\cf6 .__image_queue.get\cf4 ()\uc0\u8232             \cf0 image \cf6 = \cf0 cap_image\cf6 .get_image\cf4 ()\uc0\u8232             \cf0 predictions \cf6 = \cf5 self\cf6 .__net.image_detection\cf4 (\cf0 image\cf4 )\uc0\u8232             \cf0 result \cf6 = DetectionResult\cf4 (\uc0\u8232                 \cf7 cap_image\cf6 =\cf0 cap_image\cf6 ,\uc0\u8232                 \cf7 predictions\cf6 =\cf0 predictions\uc0\u8232             \cf4 )\uc0\u8232             \cf5 self\cf6 .__result_queue.put\cf4 (\cf0 result\cf4 )
\f3\i \cf9  \uc0\u8232     
\f2\i0 \cf2 except \cf10 Exception \cf2 as \cf11 ex\cf6 :\uc0\u8232         \cf5 self\cf6 ._health_checker.beat\cf4 (\uc0\u8232             \cf7 type\cf6 =HealthDataType.EXCEPTION,\uc0\u8232             \cf7 data\cf6 =traceback.format_exc\cf12 ()\uc0\u8232         \cf4 )\uc0\u8232     \cf5 self\cf6 ._health_checker.beat\cf4 (\uc0\u8232         \cf7 type\cf6 =HealthDataType.STOPPED,\uc0\u8232         \cf7 data\cf6 =\cf8 'FINISH'\uc0\u8232     \cf4 )\uc0\u8232     \cf5 self\cf6 ._health_checker.stop\cf4 ()\uc0\u8232     \cf5 self\cf6 ._health_checker.join\cf4 ()\
\
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab708\ri-6\partightenfactor0

\f0\fs24 \cf0 \uc0\u1051 \u1080 \u1089 \u1090 \u1080 \u1085 \u1075 
\f1  2 \'96 
\f0 \uc0\u1055 \u1088 \u1086 \u1094 \u1077 \u1089 \u1089 
\f1  
\f0 \uc0\u1086 \u1073 \u1088 \u1072 \u1073 \u1086 \u1090 \u1082 \u1080 
\f1  
\f0 \uc0\u1086 \u1073 \u1085 \u1072 \u1088 \u1091 \u1078 \u1077 \u1085 \u1085 \u1099 \u1093 
\f1  
\f0 \uc0\u1086 \u1073 \u1098 \u1077 \u1082 \u1090 \u1086 \u1074 
\f1 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab708\ri-6\partightenfactor0

\f2\fs20 \cf2 def \cf3 __handle_predictions\cf4 (\cf5 self\cf4 )\cf6 : \uc0\u8232     \cf0 predictions\cf6 : \cf10 list\cf4 [\cf6 DetectionResult\cf4 ] \cf6 = \cf5 self\cf6 .__get_predictions\cf4 ()\uc0\u8232     \cf5 self\cf6 .__handle_results\cf4 (\cf0 predictions\cf4 )\uc0\u8232     \cf5 self\cf6 .__save_results\cf4 ()\uc0\u8232 \cf6 \
\cf2 def \cf3 __handle_results\cf4 (\cf5 self\cf6 , \cf0 predictions\cf6 : \cf10 list\cf4 [\cf6 DetectionResult\cf4 ])\cf6 :\uc0\u8232     \cf2 for \cf0 res \cf2 in \cf0 predictions\cf6 : \cf4 \uc0\u8232         \cf0 video\cf6 , \cf0 video_dt \cf6 = \cf5 self\cf6 .__videos_writer.set_frame\cf4 (\cf0 res\cf6 .cap_image\cf4 )\uc0\u8232         \cf5 self\cf6 .__eventor.set_data\cf4 (\cf0 res\cf6 .cap_image.meta.source,\uc0\u8232                                 \cf0 res\cf6 .cap_image.meta.dt,\uc0\u8232                                 \cf0 video\cf6 ,\uc0\u8232                                 \cf0 video_dt\cf6 ,\uc0\u8232                                 \cf0 res\cf6 .predictions\cf4 )\cf6 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f4\b\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec13 Listing 3 \'96 Loading Detection
\f1\b0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab708\ri-6\partightenfactor0

\f2\fs20 \cf2 def set_data(\
        self,\
        source: str,\
        src_dt: datetime.datetime,\
        video_name: str,\
        video_time: datetime.timedelta,\
        predictions: list[Prediction]\
):\
    # If this is a new source and its data has not been initialized, set a default value\
    if self.__areas_interest.get(source, None) is None:\
        self.add_or_update_interest_area(source, None)\
    if not self.__time_without_ladle.get(source, None):\
        self.add_or_update_bucket_loss_time(source, self._TIME_WITHOUT_LADlE_DEFAULT)\
\
    predictions = self.get_needed_prediction(predictions)\
    is_arrived = (any(\
            (\
                prediction.name in self.__interest_objs\
                and self.__check_area(source, prediction)\
            )\
            for prediction in predictions\
    ))\
    value = TractorStates.ARRIVED if is_arrived else TractorStates.DEPARTED\
\
    self.__determine_event(\
        source, src_dt, video_name, video_time, value\
    )\
\
def __determine_event(\
        self,\
        source: str,\
        src_dt: datetime.datetime,\
        video_name: str,\
        video_dt: datetime.timedelta,\
        state: TractorStates\
):\
    if not (current_state := self.__states.get(source, None)):\
        current_state = State(\
            value=state.value,\
            dt=src_dt\
        )\
        self.__states[source] = current_state\
        self.__add_new_state(current_state, source, video_name, video_dt)\
        return\
\
    if current_state.value == TractorStates.DEPARTED.value:\
        # If the current state is "Departed" and the new state is also "Departed"\
        if state == TractorStates.DEPARTED:\
            # then do not change anything\
            return\
    else:\
        # If the current state is "Arrived" and the new state is also "Arrived"\
        if state == TractorStates.ARRIVED:\
            # then update the arrival time\
            current_state.dt = src_dt\
            return\
\
        # If the "Arrived" state has not been updated for less than N time\
        if (src_dt - current_state.dt) < self.__time_without_ladle[source]:\
            # then do not change the state to "Departed"\
            return\
\
    current_state.value = state.value\
    current_state.dt = src_dt\
    self.__add_new_state(current_state, source, video_name, video_dt)\
}