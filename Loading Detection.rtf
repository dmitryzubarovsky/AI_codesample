{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Oblique;\f4\froman\fcharset0 Times-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green51\blue179;\red0\green98\blue122;
\red63\green145\blue1;\red148\green85\blue141;\red8\green8\blue8;\red102\green0\blue153;\red6\green125\blue23;
\red140\green140\blue140;\red0\green0\blue128;\red128\green128\blue128;\red14\green74\blue142;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgenericrgb\c0\c20000\c70196;\csgenericrgb\c0\c38431\c47843;
\csgenericrgb\c24706\c56863\c392;\csgenericrgb\c58039\c33333\c55294;\csgenericrgb\c3137\c3137\c3137;\csgenericrgb\c40000\c0\c60000;\csgenericrgb\c2353\c49020\c9020;
\csgenericrgb\c54902\c54902\c54902;\csgenericrgb\c0\c0\c50196;\csgenericrgb\c50196\c50196\c50196;\csgenericrgb\c5490\c29020\c55686;}
{\info
{\author Danila}
{\*\company SPecialiST RePack}}\paperw11900\paperh16840\margl1701\margr850\margb1134\margt1134\vieww12500\viewh16560\viewkind1\viewscale128
\deftab720
\pard\pardeftab720\sl342\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Listing 1 \'96 Detection Process
\f1\fs24  \

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab708\ri-6\partightenfactor0

\f2\fs20 \cf3 def \cf4 run\cf5 (\cf6 self\cf5 ) \cf7 -> \cf3 None\cf7 :\uc0\u8232     \cf6 self\cf7 .__init\cf5 ()\uc0\u8232     \cf6 self\cf7 ._health_checker.beat\cf5 (\uc0\u8232         \cf8 type\cf7 =HealthDataType.DATA,\uc0\u8232         \cf8 data\cf7 =\cf9 'START'\uc0\u8232     \cf5 )\uc0\u8232     \cf3 try\cf7 :
\f3\i \cf10 \uc0\u8232         
\f2\i0 \cf3 while \cf6 self\cf7 ._continue_work\cf5 ()\cf7 :\uc0\u8232             \cf3 if \cf6 self\cf7 .__image_queue.empty\cf5 ()\cf7 :\uc0\u8232                 time.sleep\cf5 (\cf6 self\cf7 .__sleep_time_attempting_get_task\cf5 )\uc0\u8232                 \cf3 continue
\f3\i \cf10 \uc0\u8232 \u8232             
\f2\i0 \cf0 cap_image\cf7 : \cf0 CapturedImage \cf7 = \cf6 self\cf7 .__image_queue.get\cf5 ()\uc0\u8232             \cf0 image \cf7 = \cf0 cap_image\cf7 .get_image\cf5 ()\uc0\u8232             \cf0 predictions \cf7 = \cf6 self\cf7 .__net.image_detection\cf5 (\cf0 image\cf5 )\uc0\u8232             \cf0 result \cf7 = DetectionResult\cf5 (\uc0\u8232                 \cf8 cap_image\cf7 =\cf0 cap_image\cf7 ,\uc0\u8232                 \cf8 predictions\cf7 =\cf0 predictions\uc0\u8232             \cf5 )\uc0\u8232             \cf6 self\cf7 .__result_queue.put\cf5 (\cf0 result\cf5 )
\f3\i \cf10  \uc0\u8232     
\f2\i0 \cf3 except \cf11 Exception \cf3 as \cf12 ex\cf7 :\uc0\u8232         \cf6 self\cf7 ._health_checker.beat\cf5 (\uc0\u8232             \cf8 type\cf7 =HealthDataType.EXCEPTION,\uc0\u8232             \cf8 data\cf7 =traceback.format_exc\cf13 ()\uc0\u8232         \cf5 )\uc0\u8232     \cf6 self\cf7 ._health_checker.beat\cf5 (\uc0\u8232         \cf8 type\cf7 =HealthDataType.STOPPED,\uc0\u8232         \cf8 data\cf7 =\cf9 'FINISH'\uc0\u8232     \cf5 )\uc0\u8232     \cf6 self\cf7 ._health_checker.stop\cf5 ()\uc0\u8232     \cf6 self\cf7 ._health_checker.join\cf5 ()\
\
\pard\pardeftab720\sl342\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Listing 2 \'96 Detected Objects Processing Procedure
\f1\fs24  
\f0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab708\ri-6\partightenfactor0

\f2\fs20 \cf3 def \cf4 __handle_predictions\cf5 (\cf6 self\cf5 )\cf7 : \uc0\u8232     \cf0 predictions\cf7 : \cf11 list\cf5 [\cf7 DetectionResult\cf5 ] \cf7 = \cf6 self\cf7 .__get_predictions\cf5 ()\uc0\u8232     \cf6 self\cf7 .__handle_results\cf5 (\cf0 predictions\cf5 )\uc0\u8232     \cf6 self\cf7 .__save_results\cf5 ()\uc0\u8232 \cf7 \
\cf3 def \cf4 __handle_results\cf5 (\cf6 self\cf7 , \cf0 predictions\cf7 : \cf11 list\cf5 [\cf7 DetectionResult\cf5 ])\cf7 :\uc0\u8232     \cf3 for \cf0 res \cf3 in \cf0 predictions\cf7 : \cf5 \uc0\u8232         \cf0 video\cf7 , \cf0 video_dt \cf7 = \cf6 self\cf7 .__videos_writer.set_frame\cf5 (\cf0 res\cf7 .cap_image\cf5 )\uc0\u8232         \cf6 self\cf7 .__eventor.set_data\cf5 (\cf0 res\cf7 .cap_image.meta.source,\uc0\u8232                                 \cf0 res\cf7 .cap_image.meta.dt,\uc0\u8232                                 \cf0 video\cf7 ,\uc0\u8232                                 \cf0 video_dt\cf7 ,\uc0\u8232                                 \cf0 res\cf7 .predictions\cf5 )\cf7 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f4\b\fs24 \cf0 \expnd0\expndtw0\kerning0
Listing 3 \'96 Loading Detection
\f0\b0 \kerning1\expnd0\expndtw0 \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab708\ri-6\partightenfactor0

\f2\fs20 \cf3 def set_data(\
        self,\
        source: str,\
        src_dt: datetime.datetime,\
        video_name: str,\
        video_time: datetime.timedelta,\
        predictions: list[Prediction]\
):\
    # If this is a new source and its data has not been initialized, set a default value\
    if self.__areas_interest.get(source, None) is None:\
        self.add_or_update_interest_area(source, None)\
    if not self.__time_without_ladle.get(source, None):\
        self.add_or_update_bucket_loss_time(source, self._TIME_WITHOUT_LADlE_DEFAULT)\
\
    predictions = self.get_needed_prediction(predictions)\
    is_arrived = (any(\
            (\
                prediction.name in self.__interest_objs\
                and self.__check_area(source, prediction)\
            )\
            for prediction in predictions\
    ))\
    value = TractorStates.ARRIVED if is_arrived else TractorStates.DEPARTED\
\
    self.__determine_event(\
        source, src_dt, video_name, video_time, value\
    )\
\
def __determine_event(\
        self,\
        source: str,\
        src_dt: datetime.datetime,\
        video_name: str,\
        video_dt: datetime.timedelta,\
        state: TractorStates\
):\
    if not (current_state := self.__states.get(source, None)):\
        current_state = State(\
            value=state.value,\
            dt=src_dt\
        )\
        self.__states[source] = current_state\
        self.__add_new_state(current_state, source, video_name, video_dt)\
        return\
\
    if current_state.value == TractorStates.DEPARTED.value:\
        # If the current state is "Departed" and the new state is also "Departed"\
        if state == TractorStates.DEPARTED:\
            # then do not change anything\
            return\
    else:\
        # If the current state is "Arrived" and the new state is also "Arrived"\
        if state == TractorStates.ARRIVED:\
            # then update the arrival time\
            current_state.dt = src_dt\
            return\
\
        # If the "Arrived" state has not been updated for less than N time\
        if (src_dt - current_state.dt) < self.__time_without_ladle[source]:\
            # then do not change the state to "Departed"\
            return\
\
    current_state.value = state.value\
    current_state.dt = src_dt\
    self.__add_new_state(current_state, source, video_name, video_dt)\
}